@startuml Test
class Car {
    + mode(autonomious=True/False)
    + drive(speed)
    + brake()
}

note top of Car
The Car class is the <b>root</b>
of the OOP tree
end note

note left of Car
Car has 2 modes:
+ <b>autonomious</b>
+ <b>manual</b>
end note

class FrontWheelDrive {
    + forward()
    + backward()
    + speed(speed)
}

class Motor {
    + forward()
    + backward()
    + speed(speed)
}

class FrontWheelSteering {
    + turn(angle)
    + turn_left()
    + turn_right()
    + turn_straight()
}
note bottom of FrontWheelSteering
subscribed to receiving steering angle
end note

class SteeringServo {
    + write(angle)
}

class Camera {
    + read()
}

class LaneFollower {
    + follow()
}

class LaneDetector {
    + detect()
}

class CarSteeringCalculator {
    - stabilize_steering_angle()
    + calc_Steering_angle()
}
note bottom of CarSteeringCalculator
publishes steering angle
end note

class FreeNoveDevice {
    + writeReg()
    + readReg()
}
note bottom of FreeNoveDevice
Communicates with FreeNove card
over i2c bus
end note



Car *-- Camera: has 1 front >
Car --> LaneFollower
Car --> FrontWheelSteering
Car --> FrontWheelDrive

Camera .> LaneFollower : images

LaneFollower --> LaneDetector
LaneFollower --> CarSteeringCalculator



FrontWheelSteering -> SteeringServo

SteeringServo --> FreeNoveDevice : use port Servo1


FrontWheelDrive -> "2" Motor: left & right
note bottom of Motor
We use 2 instances: 
+ left motor - CMD_DIR1, CMD_PWM1
+ right motor - CMD_DIR2, CMD_PWM2
end note

Motor --> FreeNoveDevice

@enduml
